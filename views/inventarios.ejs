<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Registro</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <%- include('partials/head') %>

    <style>
        .input-disabled {
            background-color: blue;
            color: white;
            cursor: not-allowed;
        }
        .dropdown {
            position: relative;
        }
        .dropdown-content {
            display: none;
            position: absolute;
            left: 50px;
            background-color: #ffffcc;
            min-width: 150px;
            z-index: 1;
        }
        .dropdown:hover .dropdown-content {
            display: block;
        }

        /* Ajusta el ancho del campo de texto */
        #des_activo {
            width: 200px; /* Ajusta el ancho del campo de búsqueda (puedes cambiar el valor) */
            padding: 8px 12px; /* Ajusta el relleno dentro del campo */
            font-size: 14px; /* Tamaño de la fuente */
            border-radius: 5px; /* Bordes redondeados */
            border: 1px solid #ccc; /* Borde gris claro */
            box-sizing: border-box; /* Asegura que el padding y el borde estén incluidos en el tamaño total */
        }

        /* Ajusta el estilo de la lista de sugerencias */
        #autocomplete-list {
            position: absolute;
            max-height: 200px; /* Limita la altura máxima de la lista */
            overflow-y: auto; /* Permite desplazarse si hay más resultados */
            width: 400px; /* Debe coincidir con el ancho del campo de búsqueda */
            background-color: white; /* Fondo blanco */
            border: 1px solid #ccc; /* Borde gris claro */
            border-radius: 5px; /* Bordes redondeados */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Sombra sutil */
            font-size: 14px; /* Tamaño de la fuente */
            padding: 0; /* Elimina el padding por defecto */
            box-sizing: border-box; /* Asegura que el padding y el borde estén incluidos en el tamaño total */
        }

        /* Ajusta el espaciado entre los elementos de la lista */
        .autocomplete-item {
            padding-top: 1px;    /* Espacio arriba */
            padding-bottom: 1px; /* Espacio abajo */
            padding-left: 10px;  /* Espacio a la izquierda */
            padding-right: 10px; /* Espacio a la derecha */
            cursor: pointer;
            transition: background-color 0.3s;
            color: rgb(7, 17, 156); /* Cambia el color del texto a rojo */
        }

        /* Efecto al pasar el ratón por encima de las opciones */
        .autocomplete-item:hover {
            background-color: #f1f1f1; /* Color de fondo al pasar el ratón */
        }

</style>    


<style>
    /* Estilo para el contenedor de autocompletado */
    .autocomplete-list {
        position: absolute;
        border: 1px solid #ccc;
        background-color: #fff;
        width: 100%;
        max-height: 150px;
        overflow-y: auto;
        z-index: 999;
        display: none; /* Ocultar lista por defecto */
    }

    .autocomplete-item {
        padding: 10px;
        cursor: pointer;
    }

    .autocomplete-item:hover {
        background-color: #f0f0f0;
    }

    /* Ajustes generales */
    .form-container {
        width: 50%;
        margin: auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .input-small {
        width: 100%;
        padding: 8px;
        margin: 8px 0;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

</style>


</head>
<body>
    <script src="app.js"></script>
    <% if (rol==='Administrador') { %>
        <%- include('partials/navigat') %>  
    <% } else { %> 
        <%- include('partials/navigation') %>  
    <% } %>
    <div style="display: inline;">
        <h5 style="font-size: 14px; text-shadow: 2px 2px 4px rgba(223, 18, 18, 0.5); transition: color 0.3s ease;" 
            onmouseover="this.querySelector('.user').style.color='darkblue'; this.querySelector('.name').style.color='darkred';" 
            <span class="user" style="color: rgb(211, 88, 17); padding-left: 10px;"><%= name %></span>
        </h5>
    </div> 
    <div class="content">
        <h1 style="font-size: 20px; text-shadow: 2px 2px 4px rgba(6, 4, 95, 0.5); transition: color 0.3s ease; text-decoration: underline" 
            onmouseover="this.querySelector('.user').style.color='darkblue'; this.querySelector('.name').style.color='darkred';"  
            <span><%= ciudadSeleccionadaTexto %></span>
        </h1>
        <div>
            <h6 style="font-size: 14px; text-shadow: 2px 2px 4px rgba(6, 4, 95, 0.5); transition: color 0.3s ease; margin: 0;">Ubicación</h6>
            <h1 style="font-size: 14px; text-shadow: 2px 2px 4px rgba(216, 29, 22, 0.5); transition: color 0.3s ease; margin: 0;" 
                onmouseover="this.style.color='darkblue';" 
                onmouseout="this.style.color='';">
                <span><%= parqueaderoSeleccionadoTexto %></span>
            </h1>
        </div>

        
        <div class="register-form30"> 
            <form id="registerForm" action="/inventarios" method="POST"> 
                <div class="contenedor__login-register">
                    <input type="button" class="btn-copiar" value="Pegar" tabindex="-1">
                    <h1></h1>
                    <input type="text" name="CodActivo" class="input-small" placeholder="Activo" required autocomplete="off" readonly>


        <!-- Campo de Descripción del Activo -->
        <input type="text" name="acti" id="des_activo" class="input-small" placeholder="Descripción del Activo" autocomplete="off" required style="font-size: 12px;">

        <!-- Contenedor para las sugerencias de autocompletado -->
        <div id="autocomplete-list" class="autocomplete-list"></div>

                    <input type="text" name="selclsf" class="input-small" id="selclsf" readonly style="display: none;">
                    <input type="text" name="selcodcont" class="input-small" id="selcodcont" readonly style="display: none;">
                    <input type="text" name="seledes" class="input-small" id="seledes" readonly style="display: none;">
                    <h1></h1>

                    <h6 style="margin-bottom: 0;" >Descripción Contable</h6>
                    <input type="text"  name="descont" class="input-small" id="descontAAA" readonly style="color: rgb(22, 18, 236);">
                    
                    <!-- Codigos estado -->
                    <select class="simple-border" name="esta" id="des_estado" required>
                        <option value="" selected>Seleccione Estado</option>
                    </select>
                    <h1></h1>
                    <!-- Codigos propio -->
                    <select class="simple-border" name="prop" id="des_propio" required>
                        <option value="" selected>Seleccione Propio</option>
                    </select>

                    <h1></h1>
                    <input type="text" name="observ" class="input-small" placeholder="Observaciones / marca"  autocomplete="off">
                    <h1></h1>

                    <h1></h1>
                    <input type="text" name="CodResp" class="input-small" placeholder="Responsable" autocomplete="off" hidden>
                    <h1></h1>

                    <input type="text" name="ActPrin" class="input-small" placeholder="Escribir Codigo Activo Principal" autocomplete="off" hidden>
                    <h1></h1>
                    <div style="display: inline;">
                        <h5></h5>
                        <input type="submit" class="btn-save" value="Registrar" tabindex="-1">
                        <a href="#" id="cancelBtn" class="btn-cancel" tabindex="-1">Cancelar</a> 
                    </div>
                    <input type="hidden" name="CodActivoHidden" id="CodActivoHidden">
                </div>       
                <br>    
                <input type="button" class="btn-copiar" value="Eliminar" tabindex="-1" style="opacity: 0;" id="btnEliminar">
                <div style="display: inline;">
                    <input type="submit" id="btnSalir" class="btn-salir" value="Salir">
                    <br><br>    
                </div>
            </form>
        </div>
    </div>

        <script>
                // Establece el enfoque inicial en el primer campo de entrada
                window.onload = function() {
                    const firstInput = document.querySelector('input[name="CodActivo"]');
                    firstInput.focus();
                    // Deshabilitar la capacidad de escribir
                    firstInput.addEventListener('keydown', (event) => {
                        event.preventDefault(); // Bloquea cualquier tecla que se presione
                    });
                };
        
                document.querySelector('.btn-copiar').addEventListener('click', async function() {
                    try {
                        // Leer el contenido del portapapeles
                        const clipboardText = await navigator.clipboard.readText();
        
                        // Asignar el valor del portapapeles al primer campo de entrada
                        const firstInput = document.querySelector('input[name="CodActivo"]');   
                        firstInput.value = clipboardText; // Pega el contenido del portapapeles
        
                        // Mover el foco al segundo campo de entrada    
       //                 document.querySelector('select[name="des_activo"]').focus();
                        document.getElementById("des_activo").focus();
                        // Mover el foco al segundo campo de entrada
        //                document.querySelector('input[name="DesGen"]').focus();
        //                document.querySelector('input[name="CodCont"]').focus();
        
                        // Mover el foco al segundo campo de entrada
        //                document.querySelector('input[name="DesGen"]').focus();
        
                        // Deshabilitar el primer input y cambiar el estilo
                        firstInput.setAttribute('readonly', true);  // Cambiado: Usamos 'readonly' en lugar de 'disabled'
                        firstInput.classList.add('input-disabled');
                        
                        // Deshabilitar el botón Copiar
                        document.querySelector('.btn-copiar').disabled = true;
        
                        // Enviar el valor a un campo oculto para enviarlo al servidor
                        document.querySelector('#CodActivoHidden').value = clipboardText;
                        
                    } catch (err) {
                        console.error('Error al leer el portapapeles:', err);
                        alert('Hubo un error al acceder al portapapeles.', err);
                    }
                });
        
                // Detectar cuando el valor es pegado en el primer input y saltar al segundo
                document.querySelector('input[name="CodActivo"]').addEventListener('input', function() {
                    // Verifica si el campo tiene un valor (indica que se pegó algo)
                    if (this.value.trim() !== '') {
                        // Mueve el foco al siguiente campo (segundo input)
                        document.querySelector('input[name="CodCont"]').focus();
                    }
                });
        
                // Función para manejar el clic en el botón "Cancelar"
                document.getElementById("cancelBtn").addEventListener("click", function(event) {
                    event.preventDefault();  // Evitar la acción por defecto (ir a una URL)
                    // Limpiar todos los campos del formulario
                    const form = document.getElementById("registerForm");
                    form.reset();
        
                    // Habilitar el primer input y remover el estilo de deshabilitado
                    const firstInput = document.querySelector('input[name="CodActivo"]');
                    firstInput.removeAttribute('readonly');
                    firstInput.classList.remove('input-disabled');
        
                    // Habilitar el botón Copiar de nuevo
                    document.querySelector('.btn-copiar').disabled = false;
        
                    // Colocar el foco en el primer input
                    firstInput.focus();
                });
        
                // Función para manejar el clic en el botón "Registrar"
                document.querySelector('.btn-save').addEventListener("click", function() {
                    // Habilitar el botón Copiar nuevamente si el formulario es registrado
                    document.querySelector('.btn-copiar').disabled = false;
                });
        
                // Validación del formulario antes de enviarlo
                document.getElementById('registerForm').addEventListener('submit', async function(event) {
                    event.preventDefault(); // Evitar que el formulario se envíe de forma tradicional
        
                    // Verificar si el campo CodActivo tiene un valor
                    const codActivo = document.querySelector('input[name="CodActivo"]').value.trim();
                    if (!codActivo) {
                        alert('El campo CodActivo es obligatorio.');
                        return;
                    }
        
                    const formData = new FormData(this);
                    const response = await fetch('/inventarios', {
                        method: 'POST',
                        body: new URLSearchParams(formData)
                    });
        
                    const result = await response.json();
        
                    if (result.status === 'success') {
                        Swal.fire({
                            title: result.title,
                            text: result.message,
                            icon: result.status,
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            window.location.href = '/inventarios'; // Redirigir al usuario si es necesario
                        });
                    } else if (result.status === 'exists' && result.options) {
                        // Si ya existe y hay opciones (eliminar o mantener)
                        Swal.fire({
                            title: result.title,
                            text: result.message,
                            icon: result.status,
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Si el usuario elige eliminar
                                //eliminarActivo(codActivo); // Llamada a la función para eliminar el activo
        
                                // Hacer visible el botón de eliminar
                                document.getElementById('btnEliminar').style.opacity = '1'; // Cambia a visible
                                //Swal.fire('Registro Eliminado.', '', 'info');
                            } else {
                                // Si el usuario elige mantener, no hacemos nada
                                Swal.fire('El Activo se mantiene sin cambios.', '', 'info');
                            }
                        });
                    } else {
                        Swal.fire({
                            title: result.title,
                            text: result.message,
                            icon: result.status,
                            showConfirmButton: true
                        });
                    }
                });
        
                // Función para eliminar el activo
                async function eliminarActivo(codActivo) {
                    Swal.fire('Registro Eliminado 1.', '', 'info');
                    const response = await fetch(`/inventarios/eliminar/${codActivo}`, {
                        method: 'DELETE'
                    });
        
                    const result = await response.json();
        
                    if (result.status === 'success') {
                        Swal.fire({
                            title: result.title,
                            text: result.message,
                            icon: result.status,
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            window.location.href = '/inventarios'; // Redirigir después de eliminar
                        });
                    } else {
                        Swal.fire({
                            title: result.title,
                            text: result.message,
                            icon: result.status,
                            showConfirmButton: true
                        });
                    }
                }
            </script>
        
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    document.getElementById('btnEliminar').addEventListener('click', async function(event) {
                        event.preventDefault(); // Evitar el comportamiento por defecto (enviar formulario)
                        const form = document.getElementById('registerForm'); // Obtener el formulario
                        const formData = new FormData(form);
                        const response = await fetch('/inventeli', {
                            method: 'POST',
                            body: new URLSearchParams(formData)
                        });
                        const result = await response.json();
                        Swal.fire({
                            title: result.title || 'Error',
                            text: result.message || 'Hubo un problema',
                            icon: result.status,
                            showConfirmButton: true,
                            timer: result.status === 'success' ? 2500 : null // Timer solo para éxito
                        }).then(() => {
                            if (result.status === 'success') {
                                console.log('Redirigiendo...');
                                window.location.href = '/inventarios'; // Redirigir al usuario si es necesario
                            }
                        });
                    });
                });
            </script>
        
            <script>
                document.getElementById('btnSalir').addEventListener('click', function() {
                    // Acción para el botón "Salir"
                    window.location.href = '/'; // Redirige a la página de logout o cerrar sesión
                });
            </script>
        
    <script>
        window.onload = cargarSeleccion;

        // Función para cargar los datos de codigos contable
        async function cargarSeleccion() {
            try {
                const response = await fetch('/dataSelec');
                const data = await response.json();
                if (data.status !== 'error') {

                    activos = data.desactivos; // Guardamos los activos
                    const ciudadesSelect = document.getElementById('des_codcont');
                    const activosSelect = document.getElementById('des_activo');
                    const estadosSelect = document.getElementById('des_estado');
                    const propiosSelect = document.getElementById('des_propio');

                    // Llenar las opciones de Cod Estado
                    data.desactivos.forEach(des_activo => {
                        const option = document.createElement('option');
                        option.value = des_activo.id_clsf + '-' + des_activo.id_codcont + '-' + des_activo.des_codcont + '-' + des_activo.des_contable;
                        option.textContent = `${des_activo.des_codcont}`;
                        if (des_activo.id_codcont == '000') {
                            option.selected = true;
                        }
                        activosSelect.appendChild(option);
                    });

                    // Llenar las opciones de Cod Estado
                    data.desestado.forEach(des_estado => {
                        const option = document.createElement('option');
                        option.value = des_estado.id_codcont;
                        option.textContent = `${des_estado.id_codcont} - ${des_estado.des_codcont}`;
                        if (des_estado.id_codcont == '000') {
                            option.selected = true;
                        }
                        estadosSelect.appendChild(option);
                    });

                    // Llenar las opciones de Cod Propio
                    data.despropio.forEach(des_propio => {  
                        const option = document.createElement('option');
                        option.value = des_propio.id_codcont;
                        option.textContent = `${des_propio.id_codcont} - ${des_propio.des_codcont}`;
                        if (des_propio.id_codcont == '000') {
                            option.selected = true;
                        }
                        propiosSelect.appendChild(option);
                    });

                }
            } catch (error) {
                console.error('Error al cargar Selecciones:', error);
            }
        }
    </script>

    <script>
        let activos = []; // Almacenar los activos cargados desde el servidor

        // Cargar las opciones de activos desde el servidor

        // Filtrar los activos mientras se escribe
        function filterActivo() {
            let input = document.getElementById('des_activo');
            let filter = input.value.toLowerCase(); // Obtener el valor del input y convertirlo a minúsculas
            let autocompleteList = document.getElementById('autocomplete-list');
            autocompleteList.innerHTML = ''; // Limpiar las sugerencias anteriores
            autocompleteList.style.display = 'none'; // Ocultar la lista si el campo está vacío

            console.log('Filtrando activos con el valor:', filter); // Verificamos qué valor se está usando para el filtro

            // Si el campo no está vacío, se filtra la lista
            if (filter) {
                // Filtrar los activos según el valor que el usuario ha escrito
                const filteredItems = activos.filter(activo => {
                    // Revisa si el valor del input está contenido en el principio de la descripción (no importa si es al inicio o en cualquier parte)
                    return activo.des_codcont.toLowerCase().indexOf(filter) === 0; // Esto asegura que solo coincidan si la palabra empieza con lo escrito
                });

                let selectedItemData = null;

                console.log('Elementos filtrados:', filteredItems); // Verificamos los elementos filtrados

                if (filteredItems.length > 0) {
                    console.log('filter');
                    console.log(filteredItems); // Esto imprimirá los elementos filtrados
                    autocompleteList.style.display = 'block'; // Mostrar la lista si hay resultados
                
                }

                // Crear las sugerencias para el autocompletado
                filteredItems.forEach(item => {
                        let div = document.createElement('div');
                        div.classList.add('autocomplete-item');
                        div.innerHTML = item.des_codcont;
                        div.addEventListener('click', function() {
                            console.log(item);  

                        // Asignar cada valor a los inputs correspondientes
                        document.getElementById('selclsf').value = item.id_clsf;
                        document.getElementById('selcodcont').value = item.id_codcont;
                        document.getElementById('seledes').value =  item.des_codcont;
                        document.getElementById('descontAAA').value = item.des_contable;  
            
                        input.value = item.des_codcont; // Rellenar el campo de texto con la descripción del activo
                        autocompleteList.innerHTML = ''; // Limpiar la lista de sugerencias
                        autocompleteList.style.display = 'none'; // Ocultar la lista
                    });
                    autocompleteList.appendChild(div); // Añadir el nuevo item a la lista
                });
            }
        }

        // Esperar hasta que el contenido de la página esté completamente cargado
        window.onload = function() {
            cargarSeleccion(); // Cargar los datos de la base de datos
            const input = document.getElementById('des_activo');
            input.addEventListener('input', filterActivo); // Aplicar la función filterActivo cuando el usuario escribe
        };
    </script>

    <%- include('partials/footer') %>  
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
</body>
</html>


